<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:conv="clr-namespace:TinyUnrealPackerExtended.Converters"
    xmlns:hc="https://handyorg.github.io/handycontrol"
    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
    xmlns:local="clr-namespace:TinyUnrealPackerExtended">

    <!--  Конвертеры  -->
    <BooleanToVisibilityConverter x:Key="BoolToVis" />
    <local:FileNameOnlyConverter x:Key="FileNameOnlyConverter" />
    <conv:IsLastBreadcrumbConverter x:Key="IsLastBreadcrumbConverter" />
    <conv:NullToVisibilityConverter x:Key="NullToVis" />

    <Style x:Key="SmoothGridSplitterStyle" TargetType="GridSplitter">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GridSplitter">
                    <Border
                        x:Name="Bd"
                        Height="5"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Center"
                        Background="{TemplateBinding Background}"
                        CornerRadius="2"
                        Cursor="SizeNS" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SearchTextBoxStyle" TargetType="TextBox">
        <Setter Property="Width" Value="270" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Padding" Value="10,5" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Background" Value="{DynamicResource SearchTextBoxBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SearchTextBoxBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Grid>
                        <Border
                            x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="6"
                            SnapsToDevicePixels="True">
                            <Border.Effect>
                                <DropShadowEffect
                                    x:Name="Shadow"
                                    BlurRadius="0"
                                    Opacity="0"
                                    ShadowDepth="0"
                                    Color="{DynamicResource SearchTextBoxShadowColor}" />
                            </Border.Effect>

                            <Grid>
                                <ScrollViewer
                                    x:Name="PART_ContentHost"
                                    Margin="0"
                                    VerticalAlignment="Center" />

                                <TextBlock
                                    x:Name="Placeholder"
                                    Margin="12,0"
                                    VerticalAlignment="Center"
                                    FontSize="13"
                                    Foreground="{DynamicResource PlaceholderMainBrush}"
                                    IsHitTestVisible="False"
                                    Opacity="0"
                                    Text="Поиск…" />
                            </Grid>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="">
                            <Setter TargetName="Placeholder" Property="Opacity" Value="1" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                            To="{StaticResource SearchTextBoxHoverBackgroundColor}"
                                            Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                            To="{StaticResource SearchTextBoxBackgroundColor}"
                                            Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            To="{StaticResource SearchTextBoxFocusBorderColor}"
                                            Duration="0:0:0.2" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="Shadow"
                                            Storyboard.TargetProperty="BlurRadius"
                                            To="8"
                                            Duration="0:0:0.2" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="Shadow"
                                            Storyboard.TargetProperty="Opacity"
                                            To="0.4"
                                            Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            To="{StaticResource SearchTextBoxDefaultBorderColor}"
                                            Duration="0:0:0.2" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="Shadow"
                                            Storyboard.TargetProperty="BlurRadius"
                                            To="0"
                                            Duration="0:0:0.2" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="Shadow"
                                            Storyboard.TargetProperty="Opacity"
                                            To="0"
                                            Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderToggleStyle" TargetType="ToggleButton">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <iconPacks:PackIconMaterial
                            x:Name="Arrow"
                            Width="12"
                            Height="12"
                            Foreground="{DynamicResource ExpanderArrowBrush}"
                            Kind="ChevronRight"
                            RenderTransformOrigin="0.5,0.5">
                            <iconPacks:PackIconMaterial.RenderTransform>
                                <RotateTransform Angle="0" />
                            </iconPacks:PackIconMaterial.RenderTransform>
                        </iconPacks:PackIconMaterial>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="Arrow"
                                            Storyboard.TargetProperty="(RenderTransform).(RotateTransform.Angle)"
                                            To="90"
                                            Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="Arrow"
                                            Storyboard.TargetProperty="(RenderTransform).(RotateTransform.Angle)"
                                            To="0"
                                            Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListViewItemWithMenu" TargetType="ListViewItem">
        <!--  Увеличенные отступы для «больших» айтемов  -->
        <Setter Property="Margin" Value="6" />
        <Setter Property="Padding" Value="12" />
        <!--  Белый фон по умолчанию  -->
        <Setter Property="Background" Value="{DynamicResource ItemBackgroundBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Tag" Value="{Binding DataContext.FolderEditorVM, RelativeSource={RelativeSource AncestorType=Window}}" />

        <!--  Контекстное меню (как у вас было)  -->
        <Setter Property="ContextMenu">
            <Setter.Value>
                <!--  Устанавливаем DataContext самого ContextMenu на ваш VM  -->
                <ContextMenu DataContext="{Binding PlacementTarget.Tag, RelativeSource={RelativeSource Self}}">

                    <!--  Открыть  -->
                    <MenuItem
                        Command="{Binding OpenFolderCommand}"
                        CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Header="Открыть" />

                    <MenuItem
                        Command="{Binding PreviewTextureCommand}"
                        CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Header="Открыть картинку" />
                    <MenuItem
                        Command="{Binding PreviewAssetCommand}"
                        CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Header="Открыть .JSON" />

                    <Separator />

                    <!--  Копировать  -->
                    <MenuItem
                        Command="{Binding CopyFolderItemCommand}"
                        CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Header="Копировать" />

                    <!--  Вырезать  -->
                    <MenuItem
                        Command="{Binding CutFolderItemCommand}"
                        CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Header="Вырезать" />

                    <!--  Вставить  -->
                    <MenuItem
                        Command="{Binding PasteIntoFolderCommand}"
                        CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Header="Вставить"
                        IsEnabled="{Binding CanPaste}" />

                    <Separator />

                    <!--  Переименовать  -->
                    <MenuItem
                        Command="{Binding RenameFolderItemCommand}"
                        CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Header="Переименовать" />

                    <!--  Удалить  -->
                    <MenuItem
                        Command="{Binding RemoveFolderItemCommand}"
                        CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Header="Удалить" />

                    <Separator />

                    <!--  Свойства  -->
                    <MenuItem
                        Command="{Binding ShowPropertiesCommand}"
                        CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Header="Свойства" />
                </ContextMenu>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListViewItem">
                    <Border
                        x:Name="Bd"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="Transparent"
                        BorderThickness="1"
                        CornerRadius="6"
                        SnapsToDevicePixels="True">
                        <GridViewRowPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Columns="{Binding Path=View.Columns, RelativeSource={RelativeSource AncestorType=ListView}}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ListViewItemHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FileBorderStyle1" TargetType="Border">
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect
                    BlurRadius="10"
                    Opacity="0.15"
                    ShadowDepth="2" />
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="AutoInjectItemTemplate">
        <Border
            x:Name="Bd"
            Margin="0,8,0,0"
            Padding="12"
            Background="{DynamicResource AutoInjectItemBackgroundBrush}"
            CornerRadius="6"
            Style="{StaticResource FileBorderStyle1}"
            Tag="{Binding DataContext.AutoInjectVM, RelativeSource={RelativeSource AncestorType=Window}}">

            <Border.ContextMenu>
                <ContextMenu DataContext="{Binding PlacementTarget.Tag, RelativeSource={RelativeSource Self}}">
                    <MenuItem
                        Command="{Binding RemoveAutoInjectItemCommand}"
                        CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Header="Удалить" />
                </ContextMenu>
            </Border.ContextMenu>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <iconPacks:PackIconMaterial
                    Grid.Column="0"
                    Width="24"
                    Height="24"
                    VerticalAlignment="Center"
                    Kind="FileDocumentOutline" />
                <TextBlock
                    Grid.Column="1"
                    Margin="12,0,0,0"
                    VerticalAlignment="Center"
                    FontSize="14"
                    Text="{Binding Name}"
                    TextTrimming="CharacterEllipsis" />
                <TextBlock
                    Grid.Column="2"
                    Margin="12,0,0,0"
                    VerticalAlignment="Center"
                    FontSize="14"
                    Text="{Binding Status}" />
            </Grid>
        </Border>

        <DataTemplate.Triggers>
            <Trigger SourceName="Bd" Property="IsMouseOver" Value="True">
                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource AutoInjectItemHoverBackgroundBrush}" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <Style x:Key="CardStyle" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource CardBackgroundBrush}" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="Padding" Value="24" />
        <Setter Property="Margin" Value="24" />
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect
                    BlurRadius="10"
                    Opacity="0.15"
                    ShadowDepth="2" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FileBorderStyle" TargetType="Border">
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect
                    BlurRadius="10"
                    Opacity="0.15"
                    ShadowDepth="2" />
            </Setter.Value>
        </Setter>
    </Style>

    <DropShadowEffect
        x:Key="ItemShadowEffect"
        BlurRadius="10"
        Opacity="0.15"
        ShadowDepth="2" />

    <Style x:Key="NavigationButtonStyle" TargetType="Button">
        <Setter Property="Width" Value="32" />
        <Setter Property="Height" Value="32" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border
                        x:Name="Bd"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Background="{TemplateBinding Background}"
                        CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource NavigationButtonHoverBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource NavigationButtonPressedBackgroundBrush}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Bd" Property="Background" Value="Transparent" />
                            <Setter Property="Foreground" Value="{DynamicResource NavigationButtonDisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DeleteIconButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource DeleteIconHoverBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource DeleteIconPressedBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BreadcrumbButtonStyle" TargetType="Button">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border
                        x:Name="Bd"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource BreadcrumbHoverBackgroundBrush}" />
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource BreadcrumbHoverBorderBrush}" />
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            AutoReverse="True"
                                            Storyboard.TargetName="Bd"
                                            Storyboard.TargetProperty="Opacity"
                                            From="1"
                                            To="0.8"
                                            Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource BreadcrumbPressedBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BreadcrumbSeparatorStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="25" />
        <Setter Property="Foreground" Value="{DynamicResource BreadcrumbSeparatorBrush}" />
        <Setter Property="Margin" Value="6,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>


    <Style x:Key="BaseButtonStyle" TargetType="Button">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Padding" Value="16,8" />
        <Setter Property="Margin" Value="6,0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>

    <Style
        x:Key="PrimaryButtonStyle"
        BasedOn="{StaticResource BaseButtonStyle}"
        TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource PrimaryButtonBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryButtonForegroundBrush}" />
        <Setter Property="MinHeight" Value="44" />
        <Setter Property="MinWidth" Value="100" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        CornerRadius="4">
                        <TextBlock
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Text="{TemplateBinding Content}"
                            TextWrapping="Wrap" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="border"
                                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                            To="{StaticResource PrimaryButtonHoverColor}"
                                            Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="border"
                                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                            To="{StaticResource PrimaryButtonBackgroundColor}"
                                            Duration="0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource PrimaryButtonPressedBrush}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{StaticResource PrimaryButtonBackgroundDisabledColor}" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="SecondaryButtonStyle"
        BasedOn="{StaticResource BaseButtonStyle}"
        TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource SecondaryButtonBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="MinHeight" Value="44" />
        <Setter Property="MinWidth" Value="100" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border
                        x:Name="border"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        CornerRadius="4">
                        <TextBlock
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Text="{TemplateBinding Content}"
                            TextWrapping="Wrap" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource SecondaryButtonHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource SecondaryButtonPressedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="TrimmedSecondaryButtonStyle"
        BasedOn="{StaticResource SecondaryButtonStyle}"
        TargetType="Button">
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border
                        x:Name="border"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        CornerRadius="4">
                        <TextBlock
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Text="{TemplateBinding Content}"
                            TextTrimming="CharacterEllipsis"
                            TextWrapping="NoWrap" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource SecondaryButtonHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource SecondaryButtonPressedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Storyboard x:Key="DashOffsetStoryboard">
        <DoubleAnimation
            RepeatBehavior="Forever"
            Storyboard.TargetProperty="(hc:DashedBorder.BorderDashOffset)"
            From="0"
            To="4"
            Duration="0:0:1" />
    </Storyboard>

    <Storyboard x:Key="DragEnterColorStoryboard">
        <ColorAnimation
            Storyboard.TargetProperty="(hc:DashedBorder.Background).(SolidColorBrush.Color)"
            To="{StaticResource DragEnterBackgroundColor}"
            Duration="0:0:0.2" />
        <ColorAnimation
            Storyboard.TargetProperty="(hc:DashedBorder.BorderBrush).(SolidColorBrush.Color)"
            To="{StaticResource DragEnterBorderColor}"
            Duration="0:0:0.2" />
    </Storyboard>

    <Storyboard x:Key="DragLeaveColorStoryboard">
        <ColorAnimation
            Storyboard.TargetProperty="(hc:DashedBorder.Background).(SolidColorBrush.Color)"
            To="{StaticResource DragLeaveBackgroundColor}"
            Duration="0:0:0.2" />
        <ColorAnimation
            Storyboard.TargetProperty="(hc:DashedBorder.BorderBrush).(SolidColorBrush.Color)"
            To="{StaticResource DragLeaveBorderColor}"
            Duration="0:0:0.2" />
    </Storyboard>

    <Storyboard x:Key="DropColorStoryboard">
        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(hc:DashedBorder.Background).(SolidColorBrush.Color)">
            <DiscreteColorKeyFrame KeyTime="0:0:0" Value="{StaticResource DropSuccessBackgroundStartColor}" />
            <LinearColorKeyFrame KeyTime="0:0:1" Value="{StaticResource DropSuccessBackgroundEndColor}" />
        </ColorAnimationUsingKeyFrames>
        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(hc:DashedBorder.BorderBrush).(SolidColorBrush.Color)">
            <DiscreteColorKeyFrame KeyTime="0:0:0" Value="{StaticResource DropSuccessBorderStartColor}" />
            <LinearColorKeyFrame KeyTime="0:0:1" Value="{StaticResource DropSuccessBorderEndColor}" />
        </ColorAnimationUsingKeyFrames>
    </Storyboard>

    <Style x:Key="AnimatedDashedDropZone" TargetType="hc:DashedBorder">
        <Setter Property="Background" Value="{StaticResource DashedDropZoneBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource DashedDropZoneBorderBrush}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="BorderDashArray" Value="3,1" />
        <Setter Property="BorderDashThickness" Value="2" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="Padding" Value="24" />
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect
                    BlurRadius="10"
                    Opacity="0.15"
                    ShadowDepth="2" />
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <EventTrigger RoutedEvent="DragEnter">
                <BeginStoryboard x:Name="DashAnim" Storyboard="{StaticResource DashOffsetStoryboard}" />
                <BeginStoryboard Storyboard="{StaticResource DragEnterColorStoryboard}" />
            </EventTrigger>
            <EventTrigger RoutedEvent="DragLeave">
                <StopStoryboard BeginStoryboardName="DashAnim" />
                <BeginStoryboard Storyboard="{StaticResource DragLeaveColorStoryboard}" />
            </EventTrigger>
            <EventTrigger RoutedEvent="Drop">
                <StopStoryboard BeginStoryboardName="DashAnim" />
                <BeginStoryboard Storyboard="{StaticResource DropColorStoryboard}" />
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="FileItemTemplate">
        <Border
            Margin="0,8,0,0"
            Padding="12"
            Background="{DynamicResource ItemBackgroundBrush}"
            CornerRadius="6"
            Style="{StaticResource FileBorderStyle}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <iconPacks:PackIconMaterial
                    Grid.Column="0"
                    Width="24"
                    Height="24"
                    VerticalAlignment="Center"
                    Kind="{Binding IconKind}" />

                <TextBlock
                    Grid.Column="1"
                    Margin="12,0,0,0"
                    VerticalAlignment="Center"
                    FontSize="14"
                    Text="{Binding FileName}"
                    TextTrimming="CharacterEllipsis" />

                <Button
                    Grid.Column="2"
                    Width="28"
                    Height="28"
                    VerticalAlignment="Center"
                    Command="{Binding DataContext.RemoveFileCommand, RelativeSource={RelativeSource AncestorType=ItemsControl}}"
                    CommandParameter="{Binding}"
                    Content="✕"
                    Style="{StaticResource SecondaryButtonStyle}" />
            </Grid>
        </Border>
    </DataTemplate>


    <Style
        x:Key="CustomHC_TabItemStyle"
        BasedOn="{StaticResource {x:Type TabItem}}"
        TargetType="TabItem">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Grid>
                        <ContentPresenter
                            x:Name="HeaderContent"
                            Margin="16,8"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            ContentSource="Header" />
                        <Border
                            x:Name="Underline"
                            Height="2"
                            VerticalAlignment="Bottom"
                            Background="{DynamicResource PrimaryButtonBackgroundBrush}"
                            CornerRadius="1"
                            Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="HeaderContent" Property="TextElement.Foreground" Value="{DynamicResource PrimaryButtonBackgroundBrush}" />
                            <Setter TargetName="HeaderContent" Property="TextElement.FontWeight" Value="SemiBold" />
                            <Setter TargetName="Underline" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="HeaderContent" Property="TextElement.Foreground" Value="{DynamicResource TextDisabledBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Новый стиль для пунктов Sidebar  -->
    <Style x:Key="SidebarItemStyle" TargetType="ToggleButton">
        <!--  чуть поменьше, чем было  -->
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Padding" Value="12,8" />
        <Setter Property="Margin" Value="0,6" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <!--  индикатор слева  -->
                        <Border
                            x:Name="Indicator"
                            Width="4"
                            HorizontalAlignment="Left"
                            Background="Transparent"
                            CornerRadius="2" />
                        <ContentPresenter Margin="12,0,0,0" VerticalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--  при наведении  -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ListViewItemHoverBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
                            <!--  показываем цветной бар слева  -->
                            <Setter TargetName="Indicator" Property="Background" Value="{DynamicResource SecondaryButtonHoverBrush}" />
                        </Trigger>
                        <!--  когда выбран  -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Indicator" Property="Background" Value="{DynamicResource PrimaryButtonBackgroundBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource PrimaryButtonBackgroundBrush}" />
                            <Setter Property="FontWeight" Value="SemiBold" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ThemeOptionToggleStyle" TargetType="ToggleButton">
        <Setter Property="Margin" Value="8" />
        <Setter Property="Padding" Value="12,8" />
        <Setter Property="MinWidth" Value="100" />
        <Setter Property="MinHeight" Value="60" />
        <Setter Property="Cursor" Value="Hand" />
        <!--  default background — серый карточный  -->
        <Setter Property="Background" Value="{DynamicResource CardBackgroundBrush}" />
        <!--  default border — второстепенный текстовый цвет  -->
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrushTheme}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border
                        x:Name="Bd"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="6"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <!--  Основной текст  -->
                            <TextBlock
                                x:Name="Txt"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                FontSize="16"
                                FontWeight="SemiBold"
                                Foreground="{DynamicResource TextPrimaryBrush}"
                                Text="{TemplateBinding Content}" />

                            <!--  Скрытая по умолчанию галочка  -->
                            <Border
                                x:Name="Chk"
                                Width="24"
                                Height="24"
                                Margin="4"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Top"
                                Background="{DynamicResource PrimaryButtonBackgroundBrush}"
                                CornerRadius="4"
                                Visibility="Collapsed">
                                <iconPacks:PackIconMaterial
                                    x:Name="ChkIcon"
                                    Width="16"
                                    Height="16"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Foreground="White"
                                    Kind="Check"
                                    RenderTransformOrigin="0.5,0.5">
                                    <iconPacks:PackIconMaterial.RenderTransform>
                                        <ScaleTransform ScaleX="0" ScaleY="0" />
                                    </iconPacks:PackIconMaterial.RenderTransform>
                                </iconPacks:PackIconMaterial>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--  Light theme  -->
                        <Trigger Property="Content" Value="Light">
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource ThemeOptionLightFillBrush}" />
                            <Setter TargetName="Txt" Property="Foreground" Value="Transparent" />
                        </Trigger>
                        <!--  Dark theme  -->
                        <Trigger Property="Content" Value="Dark">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ThemeOptionDarkFillBrush}" />
                            <Setter TargetName="Txt" Property="Foreground" Value="Transparent" />
                        </Trigger>

                        <!--  Hover меняет только рамку  -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource SecondaryButtonHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <!--  рамка  -->
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource PrimaryButtonBackgroundBrush}" />

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Chk" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>

                                        <DoubleAnimation
                                            Storyboard.TargetName="Chk"
                                            Storyboard.TargetProperty="Opacity"
                                            From="0"
                                            To="1"
                                            Duration="0:0:0.2" />

                                        <DoubleAnimation
                                            BeginTime="0:0:0.1"
                                            Storyboard.TargetName="ChkIcon"
                                            Storyboard.TargetProperty="RenderTransform.ScaleX"
                                            From="0"
                                            To="1"
                                            Duration="0:0:0.2">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation
                                            BeginTime="0:0:0.1"
                                            Storyboard.TargetName="ChkIcon"
                                            Storyboard.TargetProperty="RenderTransform.ScaleY"
                                            From="0"
                                            To="1"
                                            Duration="0:0:0.2">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="ChkIcon"
                                            Storyboard.TargetProperty="RenderTransform.ScaleX"
                                            From="1"
                                            To="0"
                                            Duration="0:0:0.15" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="ChkIcon"
                                            Storyboard.TargetProperty="RenderTransform.ScaleY"
                                            From="1"
                                            To="0"
                                            Duration="0:0:0.15" />

                                        <DoubleAnimation
                                            BeginTime="0:0:0.15"
                                            Storyboard.TargetName="Chk"
                                            Storyboard.TargetProperty="Opacity"
                                            From="1"
                                            To="0"
                                            Duration="0:0:0.2" />
                                        <ObjectAnimationUsingKeyFrames
                                            BeginTime="0:0:0.35"
                                            Storyboard.TargetName="Chk"
                                            Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Collapsed}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




</ResourceDictionary>