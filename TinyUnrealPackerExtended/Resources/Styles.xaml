<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
    xmlns:hc="https://handyorg.github.io/handycontrol"
    xmlns:local="clr-namespace:TinyUnrealPackerExtended"
    xmlns:conv="clr-namespace:TinyUnrealPackerExtended.Converters">

    <!-- Конвертеры -->
    <BooleanToVisibilityConverter x:Key="BoolToVis"/>
    <local:FileNameOnlyConverter x:Key="FileNameOnlyConverter"/>
    <conv:IsLastBreadcrumbConverter x:Key="IsLastBreadcrumbConverter"/>
    <conv:NullToVisibilityConverter x:Key="NullToVis"/>

    <Style x:Key="SmoothGridSplitterStyle" TargetType="GridSplitter">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GridSplitter">
                    <Border x:Name="Bd"
          Background="{TemplateBinding Background}"
          CornerRadius="2"
          Height="5"
          VerticalAlignment="Center"
          HorizontalAlignment="Stretch"
          Cursor="SizeNS">
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SearchTextBoxStyle" TargetType="TextBox">
        <Setter Property="Width" Value="270"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Background"
                Value="{DynamicResource SearchTextBoxBackgroundBrush}"/>
        <Setter Property="Foreground"
                Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource SearchTextBoxBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Grid>
                        <Border x:Name="Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="6"
                    SnapsToDevicePixels="True">
                            <Border.Effect>
                                <DropShadowEffect x:Name="Shadow"
                                      Color="{DynamicResource SearchTextBoxShadowColor}"
                                      BlurRadius="0"
                                      ShadowDepth="0"
                                      Opacity="0"/>
                            </Border.Effect>

                            <Grid>
                                <ScrollViewer x:Name="PART_ContentHost"
                                  Margin="0"
                                  VerticalAlignment="Center"/>

                                <TextBlock x:Name="Placeholder"
                               Text="Поиск…"
                               FontSize="13"
                               Margin="12,0"
                                           Foreground="{DynamicResource PlaceholderMainBrush}"
                               IsHitTestVisible="False"
                               VerticalAlignment="Center"
                               Opacity="0"/>
                            </Grid>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="">
                            <Setter TargetName="Placeholder"
                        Property="Opacity"
                        Value="1"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                                        To="{StaticResource SearchTextBoxHoverBackgroundColor}"
                                                        Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                                        To="{StaticResource SearchTextBoxBackgroundColor}"
                                                        Duration="0:0:0.25" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            To="{StaticResource SearchTextBoxFocusBorderColor}"
                                            Duration="0:0:0.2"/>
                                        <DoubleAnimation Storyboard.TargetName="Shadow"
                                             Storyboard.TargetProperty="BlurRadius"
                                             To="8"
                                             Duration="0:0:0.2"/>
                                        <DoubleAnimation Storyboard.TargetName="Shadow"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0.4"
                                             Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            To="{StaticResource SearchTextBoxDefaultBorderColor}"
                                            Duration="0:0:0.2"/>
                                        <DoubleAnimation Storyboard.TargetName="Shadow"
                                             Storyboard.TargetProperty="BlurRadius"
                                             To="0"
                                             Duration="0:0:0.2"/>
                                        <DoubleAnimation Storyboard.TargetName="Shadow"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"
                                             Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderToggleStyle" TargetType="ToggleButton">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <iconPacks:PackIconMaterial
      x:Name="Arrow"
      Kind="ChevronRight"
      Width="12" Height="12"
      Foreground="{DynamicResource ExpanderArrowBrush}"
      RenderTransformOrigin="0.5,0.5">
                            <iconPacks:PackIconMaterial.RenderTransform>
                                <RotateTransform Angle="0"/>
                            </iconPacks:PackIconMaterial.RenderTransform>
                        </iconPacks:PackIconMaterial>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
              Storyboard.TargetName="Arrow"
              Storyboard.TargetProperty="(RenderTransform).(RotateTransform.Angle)"
              To="90"
              Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
              Storyboard.TargetName="Arrow"
              Storyboard.TargetProperty="(RenderTransform).(RotateTransform.Angle)"
              To="0"
              Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListViewItemWithMenu"
       TargetType="ListViewItem">
        <!-- Увеличенные отступы для «больших» айтемов -->
        <Setter Property="Margin" Value="6"/>
        <Setter Property="Padding" Value="12"/>
        <!-- Белый фон по умолчанию -->
        <Setter Property="Background"
                Value="{DynamicResource ItemBackgroundBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Tag" Value="{Binding DataContext.FolderEditorVM, RelativeSource={RelativeSource AncestorType=Window}}"/>

        <!-- Контекстное меню (как у вас было) -->
        <Setter Property="ContextMenu">
            <Setter.Value>
                <!-- Устанавливаем DataContext самого ContextMenu на ваш VM -->
                <ContextMenu DataContext="{Binding PlacementTarget.Tag, RelativeSource={RelativeSource Self}}">

                    <!-- Открыть -->
                    <MenuItem
    Header="Открыть" Foreground="{DynamicResource TextPrimaryBrush}"
    Command="{Binding OpenFolderCommand}"
    CommandParameter="{Binding PlacementTarget.DataContext,
                              RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>

                    <MenuItem
Header="Открыть картинку"
                        Foreground="{DynamicResource TextPrimaryBrush}"
Command="{Binding PreviewTextureCommand}"
CommandParameter="{Binding PlacementTarget.DataContext,
                  RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>   
                    <MenuItem Foreground="{DynamicResource TextPrimaryBrush}"
                              Header="Открыть .JSON"
Command="{Binding PreviewAssetCommand}"
CommandParameter="{Binding PlacementTarget.DataContext,
                  RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>

                    <Separator/>

                    <!-- Копировать -->
                    <MenuItem Foreground="{DynamicResource TextPrimaryBrush}"
                              Header="Копировать"
    Command="{Binding CopyFolderItemCommand}"
    CommandParameter="{Binding PlacementTarget.DataContext,
                              RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>

                    <!-- Вырезать -->
                    <MenuItem Foreground="{DynamicResource TextPrimaryBrush}"
                              Header="Вырезать"
    Command="{Binding CutFolderItemCommand}"
    CommandParameter="{Binding PlacementTarget.DataContext,
                              RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>

                    <!-- Вставить -->
                    <MenuItem Foreground="{DynamicResource TextPrimaryBrush}"
                              Header="Вставить"
    Command="{Binding PasteIntoFolderCommand}"
    CommandParameter="{Binding PlacementTarget.DataContext,
                              RelativeSource={RelativeSource AncestorType=ContextMenu}}"
    IsEnabled="{Binding CanPaste}"/>

                    <Separator/>

                    <!-- Переименовать -->
                    <MenuItem Foreground="{DynamicResource TextPrimaryBrush}"
                              Header="Переименовать"
    Command="{Binding RenameFolderItemCommand}"
    CommandParameter="{Binding PlacementTarget.DataContext,
                              RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>

                    <!-- Удалить -->
                    <MenuItem Foreground="{DynamicResource TextPrimaryBrush}"
                              Header="Удалить"
    Command="{Binding RemoveFolderItemCommand}"
    CommandParameter="{Binding PlacementTarget.DataContext,
                              RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>

                    <Separator/>

                    <!-- Свойства -->
                    <MenuItem Foreground="{DynamicResource TextPrimaryBrush}"
                              Header="Свойства"
    Command="{Binding ShowPropertiesCommand}"
    CommandParameter="{Binding PlacementTarget.DataContext,
                              RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>
                </ContextMenu>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListViewItem">
                    <Border x:Name="Bd"
                Background="{TemplateBinding Background}"
                BorderBrush="Transparent"
                BorderThickness="1"
                CornerRadius="6"
                Padding="{TemplateBinding Padding}"
                SnapsToDevicePixels="True">
                        <GridViewRowPresenter
            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
            Columns="{Binding Path=View.Columns,
                             RelativeSource={RelativeSource AncestorType=ListView}}"
            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource ListViewItemHoverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Bd" Property="Background"
                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground"
                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground"
                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FileBorderStyle1" TargetType="Border">
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect BlurRadius="10" Opacity="0.15" ShadowDepth="2"/>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="AutoInjectItemTemplate">
        <Border x:Name="Bd"
                Background="{DynamicResource AutoInjectItemBackgroundBrush}"
                CornerRadius="6"
                Padding="12"
                Tag="{Binding DataContext.AutoInjectVM, RelativeSource={RelativeSource AncestorType=Window}}"
                Margin="0,8,0,0"
                Style="{StaticResource FileBorderStyle1}">

            <Border.ContextMenu>
                <ContextMenu DataContext="{Binding PlacementTarget.Tag, RelativeSource={RelativeSource Self}}">
                    <MenuItem Header="Удалить" Foreground="{DynamicResource TextPrimaryBrush}"
                              Command="{Binding RemoveAutoInjectItemCommand}"
                              CommandParameter="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                </ContextMenu>
            </Border.ContextMenu>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <iconPacks:PackIconMaterial Kind="FileDocumentOutline"
                                            Width="24"
                                            Height="24"
                                            VerticalAlignment="Center"
                                            Grid.Column="0" />
                <TextBlock Text="{Binding Name}"
                           VerticalAlignment="Center"
                           Margin="12,0,0,0"
                           Grid.Column="1"
                           FontSize="14"
                           TextTrimming="CharacterEllipsis" />
                <TextBlock Text="{Binding Status}"
                           VerticalAlignment="Center"
                           Margin="12,0,0,0"
                           Grid.Column="2"
                           FontSize="14" />
            </Grid>
        </Border>

        <DataTemplate.Triggers>
            <Trigger SourceName="Bd"
                     Property="IsMouseOver"
                     Value="True">
                <Setter TargetName="Bd"
                        Property="Background"
                        Value="{DynamicResource AutoInjectItemHoverBackgroundBrush}" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <Style x:Key="CardStyle" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource CardBackgroundBrush}"/>
        <Setter Property="CornerRadius" Value="8"/>
        <Setter Property="Padding" Value="24"/>
        <Setter Property="Margin" Value="24"/>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect BlurRadius="10" Opacity="0.15" ShadowDepth="2"/>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FileBorderStyle" TargetType="Border">
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect BlurRadius="10" Opacity="0.15" ShadowDepth="2"/>
            </Setter.Value>
        </Setter>
    </Style>

    <DropShadowEffect x:Key="ItemShadowEffect"
              BlurRadius="10"
              Opacity="0.15"
              ShadowDepth="2"/>

    <Style x:Key="NavigationButtonStyle" TargetType="Button">
        <Setter Property="Width" Value="32"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Foreground"
                Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border
     x:Name="Bd"
     Width="{TemplateBinding Width}"
     Height="{TemplateBinding Height}"
     Background="{TemplateBinding Background}"
     CornerRadius="4">
                        <ContentPresenter
     HorizontalAlignment="Center"
     VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource NavigationButtonHoverBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource NavigationButtonPressedBackgroundBrush}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Bd" Property="Background" Value="Transparent"/>
                            <Setter Property="Foreground"
                                    Value="{DynamicResource NavigationButtonDisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DeleteIconButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <ContentPresenter HorizontalAlignment="Center"
                         VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background"
                                    Value="{DynamicResource DeleteIconHoverBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background"
                                    Value="{DynamicResource DeleteIconPressedBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BreadcrumbButtonStyle" TargetType="Button">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Padding" Value="8,4"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="Bd"
          Background="{TemplateBinding Background}"
          BorderBrush="{TemplateBinding BorderBrush}"
          BorderThickness="{TemplateBinding BorderThickness}"
          CornerRadius="4"
          Padding="{TemplateBinding Padding}">
                        <ContentPresenter
      HorizontalAlignment="Center"
      VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource BreadcrumbHoverBackgroundBrush}" />
                            <Setter TargetName="Bd"
                                    Property="BorderBrush"
                                    Value="{DynamicResource BreadcrumbHoverBorderBrush}" />
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
              Storyboard.TargetName="Bd"
              Storyboard.TargetProperty="Opacity"
              From="1" To="0.8"
              Duration="0:0:0.2"
              AutoReverse="True"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{DynamicResource BreadcrumbPressedBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BreadcrumbSeparatorStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="25"/>
        <Setter Property="Foreground"
                Value="{DynamicResource BreadcrumbSeparatorBrush}" />
        <Setter Property="Margin" Value="6,0"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>


    <Style x:Key="BaseButtonStyle" TargetType="Button">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Padding" Value="16,8"/>
        <Setter Property="Margin" Value="6,0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    </Style>

    <Style x:Key="PrimaryButtonStyle" BasedOn="{StaticResource BaseButtonStyle}" TargetType="Button">
        <Setter Property="Background"
                Value="{DynamicResource PrimaryButtonBackgroundBrush}" />
        <Setter Property="Foreground"
                Value="{DynamicResource PrimaryButtonForegroundBrush}" />
        <Setter Property="MinHeight" Value="44"/>
        <Setter Property="MinWidth" Value="100"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border"
                Background="{TemplateBinding Background}"
                CornerRadius="4">
                        <TextBlock Text="{TemplateBinding Content}"
                     Margin="{TemplateBinding Padding}"
                     TextWrapping="Wrap"
                     HorizontalAlignment="Center"
                     VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="border"
                                  Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                   To="{StaticResource PrimaryButtonHoverColor}"
                                                        Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="border"
                                  Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                  To="{StaticResource PrimaryButtonBackgroundColor}"
                                  Duration="0:0:0.2"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border"
                                    Property="Background"
                                    Value="{DynamicResource PrimaryButtonPressedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SecondaryButtonStyle" BasedOn="{StaticResource BaseButtonStyle}" TargetType="Button">
        <Setter Property="Background"
                Value="{DynamicResource SecondaryButtonBackgroundBrush}" />
        <Setter Property="Foreground"
                Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="MinHeight" Value="44"/>
        <Setter Property="MinWidth" Value="100"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border"
                Background="{TemplateBinding Background}"
                CornerRadius="4"
                Padding="{TemplateBinding Padding}">
                        <TextBlock Text="{TemplateBinding Content}"
                     TextWrapping="Wrap"
                     HorizontalAlignment="Center"
                     VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border"
                                    Property="Background"
                                    Value="{DynamicResource SecondaryButtonHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border"
                                    Property="Background"
                                    Value="{DynamicResource SecondaryButtonPressedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TrimmedSecondaryButtonStyle"
           TargetType="Button"
           BasedOn="{StaticResource SecondaryButtonStyle}">
        <Setter Property="MinWidth"
                Value="0" />
        <Setter Property="Width"
                Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            CornerRadius="4"
                            Padding="{TemplateBinding Padding}">
                        <TextBlock Text="{TemplateBinding Content}"
                                   TextTrimming="CharacterEllipsis"
                                   TextWrapping="NoWrap"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="border"
                                    Property="Background"
                                    Value="{DynamicResource SecondaryButtonHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter TargetName="border"
                                    Property="Background"
                                    Value="{DynamicResource SecondaryButtonPressedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Storyboard x:Key="DashOffsetStoryboard">
        <DoubleAnimation
            Storyboard.TargetProperty="(hc:DashedBorder.BorderDashOffset)"
            From="0" To="4"
            Duration="0:0:1"
            RepeatBehavior="Forever"/>
    </Storyboard>

    <Storyboard x:Key="DragEnterColorStoryboard">
        <ColorAnimation Storyboard.TargetProperty="(hc:DashedBorder.Background).(SolidColorBrush.Color)"
                        To="{StaticResource DragEnterBackgroundColor}"
                        Duration="0:0:0.2" />
        <ColorAnimation Storyboard.TargetProperty="(hc:DashedBorder.BorderBrush).(SolidColorBrush.Color)"
                        To="{StaticResource DragEnterBorderColor}"
                        Duration="0:0:0.2" />
    </Storyboard>

    <Storyboard x:Key="DragLeaveColorStoryboard">
        <ColorAnimation Storyboard.TargetProperty="(hc:DashedBorder.Background).(SolidColorBrush.Color)"
                        To="{StaticResource DragLeaveBackgroundColor}"
                        Duration="0:0:0.2" />
        <ColorAnimation Storyboard.TargetProperty="(hc:DashedBorder.BorderBrush).(SolidColorBrush.Color)"
                        To="{StaticResource DragLeaveBorderColor}"
                        Duration="0:0:0.2" />
    </Storyboard>

    <Storyboard x:Key="DropColorStoryboard">
        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(hc:DashedBorder.Background).(SolidColorBrush.Color)">
            <DiscreteColorKeyFrame Value="{StaticResource DropSuccessBackgroundStartColor}"
                                   KeyTime="0:0:0" />
            <LinearColorKeyFrame Value="{StaticResource DropSuccessBackgroundEndColor}"
                                 KeyTime="0:0:1" />
        </ColorAnimationUsingKeyFrames>
        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(hc:DashedBorder.BorderBrush).(SolidColorBrush.Color)">
            <DiscreteColorKeyFrame Value="{StaticResource DropSuccessBorderStartColor}"
                                   KeyTime="0:0:0" />
            <LinearColorKeyFrame Value="{StaticResource DropSuccessBorderEndColor}"
                                 KeyTime="0:0:1" />
        </ColorAnimationUsingKeyFrames>
    </Storyboard>

    <Style x:Key="AnimatedDashedDropZone" TargetType="hc:DashedBorder">
        <Setter Property="Background"
                Value="{StaticResource DashedDropZoneBackgroundBrush}" />
        <Setter Property="BorderBrush"
                Value="{StaticResource DashedDropZoneBorderBrush}" />
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderDashArray" Value="3,1"/>
        <Setter Property="BorderDashThickness" Value="2"/>
        <Setter Property="CornerRadius" Value="8"/>
        <Setter Property="Padding" Value="24"/>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect BlurRadius="10" Opacity="0.15" ShadowDepth="2"/>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <EventTrigger RoutedEvent="DragEnter">
                <BeginStoryboard x:Name="DashAnim" Storyboard="{StaticResource DashOffsetStoryboard}"/>
                <BeginStoryboard Storyboard="{StaticResource DragEnterColorStoryboard}"/>
            </EventTrigger>
            <EventTrigger RoutedEvent="DragLeave">
                <StopStoryboard BeginStoryboardName="DashAnim"/>
                <BeginStoryboard Storyboard="{StaticResource DragLeaveColorStoryboard}"/>
            </EventTrigger>
            <EventTrigger RoutedEvent="Drop">
                <StopStoryboard BeginStoryboardName="DashAnim"/>
                <BeginStoryboard Storyboard="{StaticResource DropColorStoryboard}"/>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="FileItemTemplate">
        <Border Style="{StaticResource FileBorderStyle}"
                Background="{DynamicResource ItemBackgroundBrush}"
                CornerRadius="6"
    Padding="12"
    Margin="0,8,0,0">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <iconPacks:PackIconMaterial
        Kind="{Binding IconKind}"
        Width="24" Height="24"
        VerticalAlignment="Center"
        Grid.Column="0"/>

                <TextBlock
        Text="{Binding FileName}"
        VerticalAlignment="Center"
        Margin="12,0,0,0"
        Grid.Column="1"
        FontSize="14"
        TextTrimming="CharacterEllipsis"/>

                <Button
        Content="✕"
        VerticalAlignment="Center"
        Width="28" Height="28"
        Command="{Binding DataContext.RemoveFileCommand,
                          RelativeSource={RelativeSource AncestorType=ItemsControl}}"
        CommandParameter="{Binding}"
        Style="{StaticResource SecondaryButtonStyle}"
        Grid.Column="2"/>
            </Grid>
        </Border>
    </DataTemplate>


    <Style x:Key="CustomHC_TabItemStyle"
           TargetType="TabItem"
           BasedOn="{StaticResource {x:Type TabItem}}">
        <Setter Property="Foreground"
                Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Grid>
                        <ContentPresenter x:Name="HeaderContent"
                                          ContentSource="Header"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Margin="16,8" />
                        <Border x:Name="Underline"
                                Height="2"
                                Background="{DynamicResource PrimaryButtonBackgroundBrush}"
                                VerticalAlignment="Bottom"
                                Visibility="Collapsed"
                                CornerRadius="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected"
                                 Value="True">
                            <Setter TargetName="HeaderContent"
                                    Property="TextElement.Foreground"
                                    Value="{DynamicResource PrimaryButtonBackgroundBrush}" />
                            <Setter TargetName="HeaderContent"
                                    Property="TextElement.FontWeight"
                                    Value="SemiBold" />
                            <Setter TargetName="Underline"
                                    Property="Visibility"
                                    Value="Visible" />
                        </Trigger>

                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter TargetName="HeaderContent"
                                    Property="TextElement.Foreground"
                                    Value="{DynamicResource TextDisabledBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>